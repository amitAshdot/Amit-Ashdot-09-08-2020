{"version":3,"sources":["components/ui/SearchInput.js","components/ui/icons/FavIcon.js","store/favorite/favoriteTypes.js","util/api.js","store/favorite/actions.js","components/ui/icons/FavIconEmpty.js","util/functions.js","components/layout/homePage/currentCity/CurrentCityHeader.js","components/layout/homePage/currentCity/CurrentCityForecastItem.js","components/layout/homePage/currentCity/CurrentCityForecast.js","components/layout/homePage/HomepageBox.js","store/weather/weatherTypes.js","store/weather/actions.js","components/ui/AutoComplete.js","util/Autocomplete.js","screens/HomePage.js","components/layout/header/HeaderNav.js","components/ui/icons/DarkModeIcon.js","store/settings/settingsTypes.js","store/settings/actions.js","components/layout/header/HeaderSettings.js","components/layout/header/Header.js","components/layout/favoritePage/favCityItem.js","components/ui/NoFavorites.js","screens/FavPage.js","App.js","serviceWorker.js","store/weather/reducer.js","store/settings/reducer.js","store/favorite/reducer.js","store/store.js","index.js"],"names":["SearchInput","props","className","TextField","id","label","placeholder","onChange","handleChange","multiline","variant","value","FavIcon","IconButton","aria-label","color","onClick","clicked","style","fontSize","animation","favoriteTypes","url","key","fetchStart","type","fetchSuccess","allData","localStorage","finaleData","i","length","temp","data","push","fetchFail","initFav","setItem","FavIconEmpty","calcFahrenheit","celsius","toFixed","CurrentCityHeader","weatherState","useSelector","state","weatherReducer","settings","settingsReducer","favorite","favoriteReducer","weatherIcon","currentCityKey","searchArr","currentCityName","favCitiesKey","dispatch","useDispatch","city","iconeUrl","isFav","some","cityKey","handleClick","favList","tempArr","filter","removeFav","cityName","JSON","stringify","addFav","favIcon","currentTemp","Temperature","Metric","Value","Imperial","src","alt","CurrentCityForecastItem","weekday","minTemp","maxTemp","CurrentCityForeast","weather","map","forecast","DailyForecasts","item","daysBeforeToday","today","todayDate","Date","getDay","checkDay","Minimum","Maximum","reverse","HomepageBox","currentCity","isDay","getHours","checkIfDay","weatherText","WeatherText","backgroundImage","weatherTypes","SET_INPUT","SET_CITY_KEY","SET_CITY_NAME","GET_WEATHER_ICON","CLEAR_AUTOCOMPLETE","FETCH_AUTOCOMPLETE_SUCCESS","FETCH_START","FETCH_ERROR","FETCH_WEATHER_SUCCESS","FETCH_FORECAST_SUCCESS","FETCH_GEO_LOCATION_START","FETCH_GEO_LOCATION_FAIL","FETCH_GEO_LOCATION_SUCCESS","forecastSuccess","autoCompleteSuccess","autoCompleteList","autoCompleteStart","autoCompleteFailed","error","FETCH_FAIL","fetchWeatherSuccess","setInput","input","setCityKey","setCityName","fetchGeoSuccess","EnglishName","Key","AutoComplete","chose","LocalizedName","a","Number","axios","get","res","fetchWeather","fetchForecast","listOfCountries","isoCode","Country","ID","String","fromCodePoint","toUpperCase","replace","char","charCodeAt","Paper","HomePage","hasAutoComplete","userSearchInput","useEffect","timer","setTimeout","autoCompleteText","clearTimeout","homeBox","event","preventDefault","target","class","HeaderNav","to","DarkModeIcon","dark","settingsTypes","setLightMode","darkMode","setCelsiusMode","celsiusMode","HeaderSettings","modeClass","activeCelsius","activeFahrenheit","Header","NoFavorites","FavPage","localStore","getItem","parse","promises","console","log","Promise","all","then","fetchFavorite","favCities","loading","isDatTime","IsDayTime","App","prefersDarkMode","theme","useMemo","createMuiTheme","palette","navigator","geolocation","getCurrentPosition","getCooridors","position","latitude","longitude","geoApi","ThemeProvider","exact","path","component","render","Boolean","window","location","hostname","match","initialState","isDayTime","fetchSearch","jsonForecast","action","WeatherIcon","screen","colorsMap","primary","primaryLight","primaryDark","secondaryLight","secondaryDark","darkModePrimary","darkModePrimaryLight","darkModePrimaryDark","darkModeSecondaryLight","darkModeSecondaryDark","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8646da45.chunk.js","sourcesContent":["import React from 'react'\nimport TextField from '@material-ui/core/TextField';\nconst SearchInput = (props) => {\n    return (\n        <div className={`homepage__input`}>\n            <TextField\n                id=\"outlined-textarea\"\n                label=\"Search\"\n                placeholder=\"ex. Tel-Aviv\"\n                onChange={props.handleChange}\n                multiline\n                variant=\"outlined\"\n                value={props.value}\n            />\n\n\n        </div >\n    )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst FavIcon = (props) => {\n\n    return (\n        <IconButton aria-label=\"add to favorites\" color=\"secondary\" onClick={props.clicked} >\n            <FavoriteIcon style={{ fontSize: '4rem', animation: 'pulse 1s' }} />\n        </IconButton>\n\n    )\n}\n\nexport default FavIcon\n","\nexport const favoriteTypes = {\n    FETCH_FAVORITE: \"FETCH_FAVORITE\",\n    FETCH_FAVORITE_START: \"FETCH_FAVORITE_START\",\n    FETCH_FAVORITE_SUCCESS: \"FETCH_FAVORITE_SUCCESS\",\n    FETCH_FAVORITE_FAIL: \"FETCH_FAVORITE_FAIL\",\n    ADD_FAVORITE: \"ADD_FAVORITE\",\n    REMOVE_FAVORITE: \"REMOVE_FAVORITE\",\n}","export const url = `http://dataservice.accuweather.com/`;\nexport const key = `469JvPBAURNrUJpoUy7bnbjJXn4uvab5`;","\nimport { favoriteTypes } from './favoriteTypes'\nimport axios from 'axios';\nimport { url } from '../../util/api'\n\nexport const fetchFavorite = (favList) => {\n    return async dispatch => {\n\n        // const faveArr = favList.split(',');\n        dispatch(fetchStart())\n        try {\n            const promises = favList.map((key, i) => {\n\n                console.log(key.cityKey)\n                return axios.get(`${url}/currentconditions/v1/${key.cityKey}?apikey=469JvPBAURNrUJpoUy7bnbjJXn4uvab5`)\n            });\n            const f = 'ff'\n            await Promise.all(promises).then((res) => {\n\n                dispatch(fetchSuccess(res, favList))\n            });\n        } catch (error) {\n            fetchFail(error)\n        }\n    }\n};\n\nexport const fetchStart = () => {\n    return { type: favoriteTypes.FETCH_FAVORITE_START }\n};\nexport const fetchSuccess = (allData, localStorage) => {\n\n    let finaleData = []\n    for (let i = 0; i < localStorage.length; i++) {\n        let temp = { ...allData[i].data[0], ...localStorage[i] };\n        finaleData.push(temp)\n    }\n    return { type: favoriteTypes.FETCH_FAVORITE_SUCCESS, finaleData }\n};\nexport const fetchFail = () => {\n    return { type: favoriteTypes.FETCH_FAVORITE_FAIL }\n};\nexport const initFav = () => {\n    localStorage.setItem(\"favList\", []);\n};\n\nexport const addFav = (favList, cityKey, cityName) => {\n    let tempArr = [...favList];\n    tempArr.push({ cityKey: cityKey, cityName: cityName })\n    localStorage.setItem(\"favList\", JSON.stringify(tempArr));\n    return {\n        type: favoriteTypes.ADD_FAVORITE,\n        tempArr\n    };\n};\n\nexport const removeFav = (favList, cityKey) => {\n    debugger\n    let tempArr = [...favList];\n    tempArr = tempArr.filter(city => city.cityKey !== cityKey)\n    localStorage.setItem(\"favList\", tempArr);\n    return {\n        type: favoriteTypes.REMOVE_FAVORITE,\n        tempArr\n    };\n};","import React from 'react'\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst FavIconEmpty = (props) => {\n\n    return (\n        <IconButton aria-label=\"add to favorites\" color=\"secondary\" onClick={props.clicked} >\n            <FavoriteBorderIcon style={{ fontSize: '4rem', animation: 'fadeIn  1s' }} />\n        </IconButton>\n\n    )\n}\n\nexport default FavIconEmpty\n","export const getWeatherIconNumber = (cityKey) => {\n\n};\n\nconst findDayIndex = (today, i) => {\n    const noOfDays = 7\n    return today - i >= 0 ? today - i : noOfDays - i\n}\n\nexport const checkDay = (daysBeforeToday) => {\n    let todayDate = new Date().getDay()\n    let forecastDay = findDayIndex(todayDate, daysBeforeToday)\n    return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][forecastDay]\n};\n\nexport const checkIfDay = () => {\n    let todayDate = new Date().getHours()\n\n    return todayDate <= 18 && todayDate >= 6\n};\n\nexport const calcFahrenheit = (celsius) => {\n\n    return (celsius * (9 / 5) + 32).toFixed(1)\n};\n\n","import React from 'react'\nimport FavIcon from '../../../ui/icons/FavIcon';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addFav, removeFav } from '../../../../store/favorite/actions';\nimport FavIconEmpty from '../../../ui/icons/FavIconEmpty';\nimport { calcFahrenheit } from '../../../../util/functions';\n\nconst CurrentCityHeader = () => {\n    const weatherState = useSelector(state => state.weatherReducer);\n    const settings = useSelector(state => state.settingsReducer);\n    const favorite = useSelector(state => state.favoriteReducer);\n    const { weatherIcon, currentCityKey, searchArr, currentCityName } = weatherState;\n    const { favCitiesKey } = favorite;\n    const dispatch = useDispatch();\n    const city = searchArr[0]\n    const iconeUrl = weatherIcon >= 10 ? `https://developer.accuweather.com/sites/default/files/${weatherIcon}-s.png` : `https://developer.accuweather.com/sites/default/files/0${weatherIcon}-s.png`\n\n    let isFav = favCitiesKey.some(city => city.cityKey === currentCityKey)\n\n    const handleClick = () => {\n        isFav ? dispatch(removeFav(favorite.favCitiesKey, weatherState.currentCityKey)) :\n            dispatch(addFav(favorite.favCitiesKey, currentCityKey, currentCityName))\n    }\n\n    const favIcon = (\n        isFav ? < FavIcon clicked={handleClick} /> : <FavIconEmpty clicked={handleClick} />\n    )\n\n    const currentTemp = settings.celsius ? city.Temperature.Metric.Value : city.Temperature.Imperial.Value\n    return (\n        <div className=\"current-city__header\">\n            <div className=\"current-city__header__left\">\n                <div className=\"current-city__header__left--image\">\n                    <img src={iconeUrl} alt=\"weather condition\" />\n                </div>\n                <div className=\"current-city__header__left--info\">\n                    <p className=\"current-city__header__left--name\">{weatherState.currentCityName}</p>\n                    <p className=\"current-city__header__left--temperature\">{currentTemp} </p>\n                </div>\n\n            </div>\n            <div className=\"current-city__header__right\">\n                {favIcon}\n            </div >\n\n        </div>\n    )\n}\n\nexport default CurrentCityHeader\n","import React from 'react'\n\nconst CurrentCityForecastItem = (props) => {\n    const { i, weekday, minTemp, maxTemp } = props\n    return (\n        <div className=\"forecast__box\" key={i}>\n            <div className=\"forecast__box__day\">\n                <p>{weekday}</p>\n            </div>\n            <div className=\"forecast__box__temp\">\n                <p>{minTemp}</p>\n            </div>\n            <div className=\"forecast__box__temp\">\n                <p>{maxTemp}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default CurrentCityForecastItem\n","import React from 'react'\nimport { useSelector } from 'react-redux';\nimport { checkDay } from '../../../../util/functions';\nimport CurrentCityForecastItem from './CurrentCityForecastItem';\nimport { calcFahrenheit } from '../../../../util/functions'\nconst CurrentCityForeast = () => {\n    const weather = useSelector(state => state.weatherReducer);\n    const settings = useSelector(state => state.settingsReducer);\n    const map = weather.forecast.DailyForecasts.map((item, i) => {\n        const weekday = checkDay(i)\n        const minTemp = settings.celsius ? item.Temperature.Minimum.Value : calcFahrenheit(item.Temperature.Minimum.Value)\n        const maxTemp = settings.celsius ? item.Temperature.Maximum.Value : calcFahrenheit(item.Temperature.Maximum.Value)\n        return <CurrentCityForecastItem weekday={weekday} minTemp={minTemp} maxTemp={maxTemp} key={i} />\n    }).reverse()\n\n    return (\n        <div className=\"forecast\">\n            {map}\n        </div>\n    )\n}\n\nexport default CurrentCityForeast\n","import React from 'react'\nimport { useSelector } from 'react-redux';\n\nimport CurrentCityHeader from './currentCity/CurrentCityHeader';\nimport CurrentCityForeast from './currentCity/CurrentCityForecast';\nimport { checkIfDay } from '../../../util/functions';\nconst HomepageBox = () => {\n    const currentCity = useSelector(state => state.weatherReducer);\n    const isDay = checkIfDay()\n    const weatherText = currentCity.searchArr[0].WeatherText\n    const style = isDay ?\n        {\n            backgroundImage: \"linear-gradient(to right bottom,#2998ff,#5643fa)\",\n            color: \"#f7f7f7\",\n        } :\n        {\n            backgroundImage: \"linear-gradient(to right bottom,#667083,#282c34)\",\n            color: \"#9197fb\",\n        }\n    return (\n        <div className=\"current-city\" style={style}>\n            <CurrentCityHeader />\n            <p className=\"current-city__condition\">{weatherText}</p>\n            <CurrentCityForeast />\n\n        </div>\n    )\n}\n\nexport default HomepageBox\n","export const weatherTypes = {\n    SET_INPUT: \"SET_INPUT\",\n    SET_CITY_KEY: \"SET_CITY_KEY\",\n    SET_CITY_NAME: \"SET_CITY_NAME\",\n    GET_WEATHER_ICON: \"GET_WEATHER_ICON\",\n    CLEAR_AUTOCOMPLETE: \"CLEAR_AUTOCOMPLETE\",\n\n    FETCH_AUTOCOMPLETE_SUCCESS: \"FETCH_AUTOCOMPLETE_SUCCESS\",\n    FETCH_START: \"FETCH_START\",\n    FETCH_ERROR: \"FETCH_ERROR\",\n\n    FETCH_WEATHER_SUCCESS: \"FETCH_WEATHER_SUCCESS\",\n    FETCH_FORECAST_SUCCESS: \"FETCH_FORECAST_SUCCESS\",\n\n    FETCH_GEO_LOCATION_START: \"FETCH_GEO_LOCATION_START\",\n    FETCH_GEO_LOCATION_FAIL: 'FETCH_GEO_LOCATION_FAIL',\n    FETCH_GEO_LOCATION_SUCCESS: \"FETCH_GEO_LOCATION_SUCCESS\",\n}","import { weatherTypes } from './weatherTypes'\nimport axios from 'axios';\nimport { url, key } from '../../util/api'\nimport autocompleteList from '../../dataMoc/autoComplete.json'\n\nexport const setCity = (cityKey, cityName) => {\n    return async dispatch => {\n        dispatch(setCityKey(Number(cityKey)))\n        dispatch(setCityName(cityName))\n    }\n}\nexport const getAutoComplete = (autoCompleteText) => {\n    return async dispatch => {\n        dispatch(autoCompleteStart())\n        try {\n            const res = await axios.get(`${url}/locations/v1/cities/autocomplete?apikey=${key}&q=${autoCompleteText}`);\n            await dispatch(autoCompleteSuccess(res.data))\n        } catch (error) {\n            autoCompleteFailed(error)\n        }\n    }\n}\n\nexport const fetchWeather = (cityKey) => {\n    return async dispatch => {\n        dispatch(autoCompleteStart())\n        try {\n            const res = await axios.get(`${url}/currentconditions/v1/${cityKey}?apikey=${key}`);\n            await dispatch(fetchWeatherSuccess(res.data))\n        } catch (error) {\n            autoCompleteFailed(error)\n        }\n    }\n}\n\nexport const fetchForecast = (cityKey) => {\n    return async dispatch => {\n        dispatch(autoCompleteStart())\n        try {\n            const res = await axios.get(`${url}/forecasts/v1/daily/5day/${cityKey}?apikey=${key}&metric=true`);\n            await dispatch(forecastSuccess(res.data))\n        } catch (error) {\n            autoCompleteFailed(error)\n        }\n    }\n}\n\nexport const forecastSuccess = (forecast) => {\n    return {\n        type: weatherTypes.FETCH_FORECAST_SUCCESS,\n        forecast\n    };\n};\n\nexport const autoCompleteSuccess = (autoCompleteList) => {\n    return {\n        type: weatherTypes.FETCH_AUTOCOMPLETE_SUCCESS,\n        autoCompleteList\n    };\n};\nexport const autoCompleteStart = () => {\n    return { type: weatherTypes.FETCH_START, };\n};\nexport const autoCompleteFailed = (error) => {\n    return { type: weatherTypes.FETCH_FAIL, error };\n};\n\n\nexport const fetchWeatherSuccess = (weather) => {\n    return {\n        type: weatherTypes.FETCH_WEATHER_SUCCESS,\n        weather\n    };\n};\n\nexport const setInput = (input) => {\n    return {\n        type: weatherTypes.SET_INPUT,\n        input\n    };\n};\n\nexport const setCityKey = (cityKey) => {\n    return {\n        type: weatherTypes.SET_CITY_KEY,\n        cityKey\n    };\n};\n\nexport const setCityName = (cityName) => {\n    return {\n        type: weatherTypes.SET_CITY_NAME,\n        cityName\n    };\n};\n\nexport const clearAutoComplete = () => {\n    return {\n        type: weatherTypes.CLEAR_AUTOCOMPLETE,\n    }\n}\n\n\n\n// Geo location\nexport const fetchGeoSuccess = (data) => {\n    debugger\n    let cityName = data.EnglishName, cityKey = data.Key\n    return {\n        type: weatherTypes.FETCH_GEO_LOCATION_SUCCESS,\n        cityName,\n        cityKey\n    };\n};\n\nexport const geoApi = (latitude, longitude) => {\n    return async dispatch => {\n        dispatch(autoCompleteStart())\n        try {\n            const res = await axios.get(\n                `${url}/locations/v1/cities/geoposition/search?apikey=${key}&q=${latitude}%2C${longitude}`\n            );\n            await dispatch(fetchGeoSuccess(res.data))\n        } catch (error) {\n            autoCompleteFailed(error)\n        }\n    }\n}","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { countryToFlag } from '../../util/Autocomplete'\nimport { clearAutoComplete, setInput, fetchWeather, fetchForecast, setCity, } from '../../store/weather/actions'\nimport { Paper } from '@material-ui/core';\n\nconst AutoComplete = () => {\n    const weatherState = useSelector(state => state.weatherReducer);\n    const dispatch = useDispatch();\n\n    const handleClick = (chose) => {\n        dispatch(setCity(chose.Key, chose.LocalizedName))\n        dispatch(fetchWeather(Number(chose.Key)))\n        dispatch(fetchForecast(Number(chose.Key)))\n        dispatch(setInput(chose.LocalizedName))\n        dispatch(clearAutoComplete())\n    }\n    const listOfCountries = weatherState.autoCompleteList.map((item, i) => {\n        return (\n            <div className=\"auto-complete__box\" key={i} onClick={() => handleClick(item)}>\n                <span>{countryToFlag(item.Country.ID)}</span>\n                <p className=\"auto-complete__box--p\" >\n                    {item.LocalizedName}\n                </p>\n            </div>\n        )\n    })\n    return (\n        <div className=\"auto-complete\">\n            <Paper>\n                {listOfCountries}\n            </Paper>\n        </div>\n    )\n}\n\nexport default AutoComplete","export const countryToFlag = (isoCode) => {\n\n    return typeof String.fromCodePoint !== 'undefined'\n        ? isoCode\n            .toUpperCase()\n            .replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397))\n        : isoCode;\n}","import React, { useEffect } from 'react'\nimport SearchInput from '../components/ui/SearchInput';\nimport HomepageBox from '../components/layout/homePage/HomepageBox';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AutoComplete from '../components/ui/AutoComplete';\nimport { setInput, getAutoComplete } from '../store/weather/actions'\n\nconst HomePage = () => {\n    const weatherState = useSelector(state => state.weatherReducer);\n    const dispatch = useDispatch();\n    const hasAutoComplete = weatherState.userSearchInput ? <AutoComplete /> : null\n    const { userSearchInput, currentCityKey } = weatherState\n    useEffect(() => {\n        if (userSearchInput !== ' ' && userSearchInput.length !== 0) {\n            const timer = setTimeout(() => {\n                dispatch(getAutoComplete(weatherState.userSearchInput))\n            }, 300);\n            return () => {\n                clearTimeout(timer);\n            };\n        }\n    }, [userSearchInput]);\n\n    const handleChange = (event) => {\n        event.preventDefault();\n        dispatch(setInput(event.target.value))\n    }\n    const homeBox = currentCityKey ? <HomepageBox /> : <h1>please serach</h1>\n    return (\n        <main className=\"main\">\n            <SearchInput handleChange={handleChange}\n                class=\"homepage\"\n                label=\"Search\"\n                placeholder={\"ex. Tel Aviv\"}\n                value={userSearchInput}\n            />\n            {hasAutoComplete}\n            {homeBox}\n\n        </main>\n    )\n}\n\nexport default HomePage\n","import React from 'react'\nimport { Link } from 'react-router-dom';\n\nconst HeaderNav = () => {\n    return (\n        <div className=\"header__nav\">\n            <ul className=\"header__nav__ul\">\n                <li className=\"header__nav__ul--li\">\n                    <Link to='/'><button >Home</button></Link>\n                </li>\n                <li className=\"header__nav__ul--li\">\n                    <Link to='/favorites'><button >Favorite</button></Link>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default HeaderNav\n","import React from 'react'\nimport IconButton from '@material-ui/core/IconButton';\nimport Brightness6Icon from '@material-ui/icons/Brightness6';\nconst DarkModeIcon = (props) => {\n\n    const color = props.dark ? \"#f7f7f7\" : \"#2998ff\"\n    return (\n        <IconButton aria-label=\"add to favorites\" style={{ color: color }} onClick={props.clicked} >\n            <Brightness6Icon style={{ fontSize: '2rem' }} />\n        </IconButton>\n    )\n}\n\nexport default DarkModeIcon\n","export const settingsTypes = {\n    TOGGLE_LIGHT: \"TOGGLE_LIGHT\",\n    TOGGLE_CELSIUS: \"TOGGLE_CELSIUS\",\n}","\n\nimport { settingsTypes } from './settingsTypes'\n\nexport const setLightMode = (darkMode) => {\n    return {\n        type: settingsTypes.TOGGLE_LIGHT,\n        darkMode\n    };\n};\n\nexport const setCelsiusMode = (celsiusMode) => {\n    return {\n        type: settingsTypes.TOGGLE_CELSIUS,\n        celsiusMode\n    };\n};","import React from 'react'\nimport DarkModeIcon from '../../ui/icons/DarkModeIcon';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setLightMode, setCelsiusMode } from '../../../store/settings/actions'\nconst HeaderSettings = () => {\n    const settings = useSelector(state => state.settingsReducer);\n    const dispatch = useDispatch();\n\n    const modeClass = settings.darkMode ? \"--dark\" : \"\"\n    const toggleDarkMode = () => {\n        settings.darkMode ? dispatch(setLightMode(false)) :\n            dispatch(setLightMode(true))\n    }\n\n    const toggleCelsiusMode = () => {\n        settings.celsius ? dispatch(setCelsiusMode(false)) :\n            dispatch(setCelsiusMode(true))\n    }\n\n    const activeCelsius = settings.celsius ? \"--active\" : ''\n    const activeFahrenheit = !settings.celsius ? \"--active\" : ''\n\n    return (\n        <div className={`header__settings mode${modeClass}`} >\n            <div className=\"header__settings__type\" onClick={toggleCelsiusMode}>\n                <h3 className={`header__settings__type${activeCelsius}`}>&deg;C</h3>\n                <h3 className={`header__settings__type${activeFahrenheit}`}>&deg;F</h3>\n            </div>\n            <div className=\"header__settings__dark-mode\">\n                <DarkModeIcon clicked={toggleDarkMode} dark={settings.darkMode} />\n            </div>\n\n        </div>\n    )\n}\n\nexport default HeaderSettings\n","import React from 'react'\nimport HeaderNav from './HeaderNav';\nimport HeaderSettings from './HeaderSettings';\nimport { Paper } from '@material-ui/core';\n\nconst Header = () => {\n    return (\n        <Paper>\n            <div className=\"header\">\n                <p className=\"header__logo\">Weather-app</p>\n                <HeaderSettings />\n                <HeaderNav />\n            </div>\n        </Paper>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport { calcFahrenheit } from '../../../util/functions'\nimport { useSelector } from 'react-redux';\n\nconst CurrentCityForecastItem = (props) => {\n    const settings = useSelector(state => state.settingsReducer);\n\n    const { i, cityName, weatherText } = props\n    const minTemp = settings.celsius ? props.minTemp : calcFahrenheit(props.minTemp)\n\n    return (\n        <div className=\"favorite__box\" key={i}>\n            <div className=\"favorite__box__day\">\n                <p>{cityName}</p>\n            </div>\n            <div className=\"favorite__box__temp\">\n                <p>{minTemp}</p>\n            </div>\n            <div className=\"favorite__box__condition\">\n                <p>{weatherText}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default CurrentCityForecastItem\n","import React from 'react'\n\nconst NoFavorites = () => {\n    debugger\n    return (\n        <div className=\"noFav\">\n            <div className=\"noFav__text\">\n                <h3>Please add favorites frst</h3>\n            </div>\n        </div>\n    )\n}\n\nexport default NoFavorites\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { checkDay } from '../util/functions';\nimport FavCityItem from '../components/layout/favoritePage/favCityItem.js'\nimport { getFavorite, fetchFavorite } from '../store/favorite/actions'\nimport NoFavorites from '../components/ui/NoFavorites';\n\nconst FavPage = () => {\n    const favorite = useSelector(state => state.favoriteReducer);\n    const weather = useSelector(state => state.weatherReducer);\n    const dispatch = useDispatch();\n    const localStore = localStorage.getItem('favList')\n    const favList = localStore ? JSON.parse(localStore) : []\n\n    useEffect(() => {\n        if (favList.length)\n            dispatch(fetchFavorite(favList))\n    }, [favorite.favList])\n    const { favCities } = favorite;\n    const map = favList.length > 0 && !favCities.loading ? favCities.map((item, i) => {\n        return <FavCityItem cityName={item.cityName} weatherText={item.WeatherText} minTemp={item.Temperature.Metric.Value} isDatTime={item.IsDayTime} key={i} />\n    }) : <NoFavorites />\n\n\n    return (\n        <div className=\"favorite\">\n            {map}\n        </div>\n    )\n}\n\nexport default FavPage\n","import React, { useMemo, useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport HomePage from './screens/HomePage';\nimport Header from './components/layout/header/Header';\nimport FavPage from './screens/FavPage';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\nimport Loader from './components/ui/Loader';\nimport { initFav } from './store/favorite/actions';\nimport { geoApi } from './store/weather/actions';\n\nfunction App() {\n  const settings = useSelector(state => state.settingsReducer);\n  const weather = useSelector(state => state.weatherReducer);\n  const favorite = useSelector(state => state.favoriteReducer);\n\n  const dispatch = useDispatch();\n\n  const prefersDarkMode = settings.darkMode;\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  useEffect(() => {\n    let test = ''\n    if (navigator.geolocation) {\n      test = navigator.geolocation.getCurrentPosition(getCooridors);\n    } else {\n    }\n    dispatch(initFav)\n  }, [])\n\n  const getCooridors = (position) => {\n\n    let latitude = 31.2726146\n    let longitude = 34.8072057\n    debugger\n    dispatch(geoApi(latitude, longitude))\n  }\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        <Paper>\n          <div className=\"App\">\n            <Header />\n            <Switch>\n              <Route exact path=\"/\" component={HomePage} />\n              <Route exact path=\"/favorites\" component={FavPage} />\n              <Route render={() => <h1>404: page not found</h1>} />\n            </Switch>\n          </div>\n        </Paper>\n      </ThemeProvider>\n    </Router>\n\n\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { weatherTypes } from './weatherTypes';\nimport jsonForecast from '../../dataMoc/forecast.json'\nimport jsonCurrent from '../../dataMoc/current.json'\n\nconst initialState = {\n    isDayTime: true,\n    currentCityKey: null,\n    currentCityName: \"\",\n    weatherIcon: 21,\n    weatherText: \"\",\n    searchArr: [\n        jsonCurrent\n    ],\n    fetchSearch: true,\n    forecast: jsonForecast,\n    userSearchInput: \"\",\n    autoCompleteList: [],\n    loading: false,\n    error: \"\"\n};\n\nconst weatherReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case weatherTypes.SET_INPUT:\n            return { ...state, userSearchInput: action.input }\n\n        case weatherTypes.SET_CITY_KEY:\n            return { ...state, currentCityKey: action.cityKey }\n\n        case weatherTypes.SET_CITY_NAME:\n            return { ...state, currentCityName: action.cityName }\n\n        case weatherTypes.FETCH_START:\n            return { ...state, loading: true }\n\n        case weatherTypes.FETCH_FAIL:\n            return { ...state, loading: false, error: action.error }\n\n\n        case weatherTypes.FETCH_WEATHER_SUCCESS:\n            return { ...state, loading: false, searchArr: action.weather, isDayTime: action.weather[0].IsDayTime, weatherIcon: action.weather[0].WeatherIcon, weatherText: action.weather[0].WeatherText }\n\n        case weatherTypes.FETCH_FORECAST_SUCCESS:\n            return { ...state, loading: false, forecast: action.forecast }\n\n        case weatherTypes.FETCH_AUTOCOMPLETE_SUCCESS:\n            return { ...state, loading: false, autoCompleteList: action.autoCompleteList }\n        case weatherTypes.CLEAR_AUTOCOMPLETE:\n            return { ...state, userSearchInput: \"\", autoCompleteList: [] }\n\n        case weatherTypes.FETCH_GEO_LOCATION_SUCCESS:\n            debugger\n            return { ...state, loading: false, currentCityName: action.cityName, currentCityKey: action.cityKey }\n\n\n        default:\n            return { ...state };\n    }\n\n}\nexport default weatherReducer;","import { settingsTypes } from './settingsTypes';\n\nconst initialState = {\n    darkMode: true,\n    screen: 'home',\n    celsius: true,\n\n    colorsMap: {\n        primary: \"#505867\",\n        primaryLight: \"#667083\",\n        primaryDark: \"#282c34\",\n        secondaryLight: \"#2998ff\",\n        secondaryDark: \"#5643fa\",\n\n        darkModePrimary: \"#505867\",\n        darkModePrimaryLight: \"#667083\",\n        darkModePrimaryDark: \"#282c34\",\n        darkModeSecondaryLight: \"#2998ff\",\n        darkModeSecondaryDark: \"#5643fa\",\n    }\n};\n\nconst settingsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case settingsTypes.TOGGLE_LIGHT:\n            return { ...state, darkMode: action.darkMode }\n\n        case settingsTypes.TOGGLE_CELSIUS:\n            return { ...state, celsius: action.celsiusMode }\n\n\n        default:\n            return { ...state };\n    }\n\n}\nexport default settingsReducer;","\nimport { favoriteTypes } from './favoriteTypes';\n\nconst initialState = {\n    favCitiesKey: [],\n    favCities: [],\n    loading: false\n};\n\nconst weatherReducer = (state = initialState, action) => {\n    let tempFavCities = 0\n    switch (action.type) {\n\n        // case favoriteTypes.FETCH_FAVORITE:\n        // return { ...state, favCities: action.allData ,loading: false }\n\n        case favoriteTypes.FETCH_FAVORITE_SUCCESS:\n            return { ...state, favCities: action.finaleData, loading: false }\n        case favoriteTypes.FETCH_FAVORITE_START:\n            return { ...state, loading: true }\n\n        case favoriteTypes.FETCH_FAVORITE_FAIL:\n            return { ...state, loading: false }\n\n\n\n        case favoriteTypes.ADD_FAVORITE:\n            return { ...state, favCitiesKey: action.tempArr }\n\n        case favoriteTypes.REMOVE_FAVORITE:\n            return { ...state, favCitiesKey: action.tempArr }\n\n        default:\n            return { ...state };\n    }\n\n}\nexport default weatherReducer;","\nimport weatherReducer from './weather/reducer';\nimport settingsReducer from './settings/reducer';\nimport favoriteReducer from './favorite/reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n    weatherReducer: weatherReducer,\n    settingsReducer: settingsReducer,\n    favoriteReducer: favoriteReducer,\n\n});\n\nexport const store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport './sass/main.scss';\nimport { store } from './store/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}